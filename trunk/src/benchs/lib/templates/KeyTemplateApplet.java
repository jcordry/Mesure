package benchs.lib.templates;

import javacard.framework.ISO7816;
import javacard.security.DESKey;
import javacard.security.Key;
import javacard.security.KeyBuilder;
import javacard.security.RSAPrivateCrtKey;
import javacard.security.RSAPrivateKey;
import javacard.security.RSAPublicKey;
import javacardx.crypto.KeyEncryption;

/**
 * This class should be extended by all test applets whose purpose is to measure
 * performances of keys.
 */
public abstract class KeyTemplateApplet extends TemplateApplet {
  //===========================================================================
  // Default values for keys
  //===========================================================================
	
  /** The default value for a 64-bit DES key. **/
  protected final byte[] des64Key = {
     (byte)0x92,(byte)0x49,(byte)0xf4,(byte)0x46,
     (byte)0xec,(byte)0x25,(byte)0xfd,(byte)0x2f
  };
	
  /** The default value for a 128-bit DES key. **/
  protected final byte[] des128Key = {
     (byte)0x97,(byte)0xa1,(byte)0x04,(byte)0x8a,
     (byte)0xad,(byte)0xea,(byte)0xc7,(byte)0x45,
	 (byte)0x5b,(byte)0x94,(byte)0x1f,(byte)0xe0,
	 (byte)0x7a,(byte)0x62,(byte)0xdf,(byte)0x73
  };
	
  /** The default value for a 192-bit DES key. **/
  protected final byte[] des192Key = {
      (byte)0x97,(byte)0xa1,(byte)0x04,(byte)0x8a,
      (byte)0xad,(byte)0xea,(byte)0xc7,(byte)0x45,
	  (byte)0x5b,(byte)0x94,(byte)0x1f,(byte)0xe0,
	  (byte)0x7a,(byte)0x62,(byte)0xdf,(byte)0x73,
	  (byte)0xe0,(byte)0xfb,(byte)0x10,(byte)0x76,
	  (byte)0xce,(byte)0x3e,(byte)0xf2,(byte)0x2f
  };
  
  /** The default value for the public exponent of RSA keys. **/
  protected final byte[] rsaKeyPublicExponent = {
      (byte)0x01,(byte)0x00,(byte)0x01
  };
  
  /** The default value for the modulus of a 512-bit RSA key. */
  protected final byte[] rsa64KeyModulus = {
      (byte)0xE9,(byte)0x3D,(byte)0xD9,(byte)0xD0,(byte)0xDF,(byte)0xB4,(byte)0x4A,(byte)0x31,
      (byte)0x48,(byte)0x9F,(byte)0xCE,(byte)0xD3,(byte)0xF8,(byte)0x12,(byte)0x58,(byte)0x2B,
      (byte)0x63,(byte)0xB5,(byte)0x98,(byte)0x1E,(byte)0x10,(byte)0x63,(byte)0x67,(byte)0x82,
      (byte)0x53,(byte)0x2B,(byte)0xBA,(byte)0xF4,(byte)0xD2,(byte)0xFB,(byte)0xBC,(byte)0x7B,
      (byte)0xD9,(byte)0x2C,(byte)0x96,(byte)0x09,(byte)0x25,(byte)0x7E,(byte)0x19,(byte)0x7F,
      (byte)0x9E,(byte)0x67,(byte)0xFE,(byte)0x00,(byte)0xE8,(byte)0x9E,(byte)0x97,(byte)0x5F,
      (byte)0x26,(byte)0x13,(byte)0xEB,(byte)0xC4,(byte)0x4B,(byte)0x15,(byte)0xC3,(byte)0x93,
      (byte)0x4F,(byte)0xA1,(byte)0x0D,(byte)0x6C,(byte)0x9B,(byte)0xB1,(byte)0x07,(byte)0xD5
  };

  
  /** The default value for the private exponent of a 512-bit RSA key. */
  protected final byte[] rsa64KeyPrivateExponent = {
      (byte)0x7A,(byte)0x48,(byte)0x02,(byte)0x05,(byte)0x1E,(byte)0xF3,(byte)0x4F,(byte)0x9E,
      (byte)0x6C,(byte)0xFB,(byte)0xD3,(byte)0x9C,(byte)0x8F,(byte)0xC7,(byte)0x56,(byte)0x50,
      (byte)0x51,(byte)0x33,(byte)0x28,(byte)0x70,(byte)0x42,(byte)0x99,(byte)0x4A,(byte)0xF0,
      (byte)0x29,(byte)0x98,(byte)0x98,(byte)0xA8,(byte)0xB8,(byte)0x60,(byte)0x60,(byte)0x5C,
      (byte)0xF1,(byte)0x8F,(byte)0x5E,(byte)0x32,(byte)0x60,(byte)0x3A,(byte)0x69,(byte)0xB3,
      (byte)0x22,(byte)0xB8,(byte)0x5D,(byte)0xE9,(byte)0x46,(byte)0xDC,(byte)0xF6,(byte)0x1A,
      (byte)0x00,(byte)0xEF,(byte)0x4D,(byte)0xBC,(byte)0x75,(byte)0x9D,(byte)0x67,(byte)0x77,
      (byte)0x44,(byte)0x75,(byte)0xB0,(byte)0x32,(byte)0x49,(byte)0x40,(byte)0x60,(byte)0x55
  };
  
  /** The default value for the P parameter of a 512-bit RSA key. */
  protected final byte[] rsa64P = {
      (byte)0xFC,(byte)0x9E,(byte)0xAC,(byte)0xC9,(byte)0x07,(byte)0x13,(byte)0x29,(byte)0x33,
      (byte)0x99,(byte)0x58,(byte)0x50,(byte)0x20,(byte)0x20,(byte)0x33,(byte)0xCC,(byte)0xDD,
      (byte)0x3D,(byte)0x2C,(byte)0x93,(byte)0x78,(byte)0x76,(byte)0xB8,(byte)0x9D,(byte)0xEB,
      (byte)0xA2,(byte)0xEE,(byte)0xE2,(byte)0xFF,(byte)0xF5,(byte)0x1B,(byte)0x4C,(byte)0x93
  };
  
  /** The default value for the Q parameter of a 512-bit RSA key. */
  protected final byte[] rsa64Q = {
      (byte)0xEC,(byte)0x5C,(byte)0xCC,(byte)0x33,(byte)0xB1,(byte)0xFD,(byte)0x19,(byte)0xB2,
      (byte)0x56,(byte)0x71,(byte)0x23,(byte)0x3C,(byte)0xC1,(byte)0xAA,(byte)0x3D,(byte)0xE7,
      (byte)0xA0,(byte)0x84,(byte)0x77,(byte)0xF4,(byte)0xC7,(byte)0xA9,(byte)0x4E,(byte)0xD6,
      (byte)0x71,(byte)0x85,(byte)0xC3,(byte)0x09,(byte)0xC2,(byte)0xDB,(byte)0x02,(byte)0xF7
  };
  
  /** The default value for the PQ parameter of a 512-bit RSA key. */
  protected final byte[] rsa64PQ = {
      (byte)0x4E,(byte)0xC5,(byte)0x68,(byte)0x24,(byte)0x36,(byte)0x27,(byte)0x7A,(byte)0x9B,
      (byte)0x9E,(byte)0x2E,(byte)0x78,(byte)0x20,(byte)0x4F,(byte)0xC8,(byte)0x5D,(byte)0x4D,
      (byte)0x1A,(byte)0x25,(byte)0xCF,(byte)0x22,(byte)0xBD,(byte)0x88,(byte)0x51,(byte)0xB8,
      (byte)0xCC,(byte)0xF9,(byte)0x21,(byte)0x8B,(byte)0x64,(byte)0x89,(byte)0x2E,(byte)0xF6
  };
  
  /** The default value for the P1 parameter of a 512-bit RSA key. */
  protected final byte[] rsa64P1 = {
      (byte)0xD8,(byte)0xE4,(byte)0x33,(byte)0x5D,(byte)0x75,(byte)0xE1,(byte)0x91,(byte)0xA2,
      (byte)0x67,(byte)0xAA,(byte)0x57,(byte)0x40,(byte)0xFD,(byte)0xE4,(byte)0xFB,(byte)0xA3,
      (byte)0x87,(byte)0xFE,(byte)0x59,(byte)0xAF,(byte)0x37,(byte)0xDF,(byte)0x52,(byte)0x57,
      (byte)0x19,(byte)0xD1,(byte)0x18,(byte)0xBC,(byte)0xC1,(byte)0xE8,(byte)0xEA,(byte)0x59
  };
  
  /** The default value for the Q1 parameter of a 512-bit RSA key. */
  protected final byte[] rsa64Q1 = {
      (byte)0x77,(byte)0x05,(byte)0xFB,(byte)0xE6,(byte)0x84,(byte)0x58,(byte)0xB9,(byte)0xD9,
      (byte)0xEE,(byte)0x61,(byte)0xA6,(byte)0xA6,(byte)0xEF,(byte)0xB7,(byte)0x34,(byte)0xD9,
      (byte)0x31,(byte)0x21,(byte)0xC3,(byte)0xEE,(byte)0x45,(byte)0xA4,(byte)0xE2,(byte)0x88,
      (byte)0x66,(byte)0x3E,(byte)0x3F,(byte)0x8A,(byte)0xE8,(byte)0xCE,(byte)0xB4,(byte)0xDD
  };
	
  /** The default value for the modulus of a 768-bit RSA key. **/
  protected final byte[] rsa96KeyModulus = {
      (byte)0xE7,(byte)0x4F,(byte)0x81,(byte)0xC6,(byte)0x58,(byte)0x34,(byte)0x3D,(byte)0xF2,
      (byte)0xC6,(byte)0x05,(byte)0xFF,(byte)0x62,(byte)0xDE,(byte)0x00,(byte)0x85,(byte)0x6B,
      (byte)0xA9,(byte)0x8E,(byte)0x04,(byte)0x3A,(byte)0x84,(byte)0x46,(byte)0xFC,(byte)0x05,
      (byte)0x80,(byte)0xAA,(byte)0x12,(byte)0x2B,(byte)0xD9,(byte)0xAE,(byte)0xF1,(byte)0x05,
      (byte)0x9C,(byte)0x1A,(byte)0x4A,(byte)0x38,(byte)0x39,(byte)0xC1,(byte)0x1A,(byte)0xC3,
      (byte)0x77,(byte)0xF9,(byte)0x2E,(byte)0xB4,(byte)0x66,(byte)0x2A,(byte)0x82,(byte)0xE1,
      (byte)0x41,(byte)0xDB,(byte)0x7B,(byte)0xB6,(byte)0xF9,(byte)0x73,(byte)0x0F,(byte)0x3B,
      (byte)0x95,(byte)0x8D,(byte)0x18,(byte)0x83,(byte)0x88,(byte)0x95,(byte)0x5E,(byte)0x9C,
      (byte)0xDE,(byte)0xC5,(byte)0x58,(byte)0xB5,(byte)0xEF,(byte)0xC9,(byte)0xEF,(byte)0x64,
      (byte)0x43,(byte)0x03,(byte)0x26,(byte)0xE9,(byte)0xE5,(byte)0x4E,(byte)0x3B,(byte)0x34,
      (byte)0xEA,(byte)0xE8,(byte)0xA9,(byte)0xDD,(byte)0xE1,(byte)0x6D,(byte)0x51,(byte)0xA9,
      (byte)0x1F,(byte)0x1E,(byte)0x18,(byte)0x88,(byte)0x7B,(byte)0xB6,(byte)0xF4,(byte)0x51
  };
  
  /** The default value for the private exponent of a 768-bit RSA key. **/
  protected final byte[] rsa96KeyPrivateExponent = {
      (byte)0xDA,(byte)0x4E,(byte)0xDA,(byte)0x9F,(byte)0x75,(byte)0x0D,(byte)0xD1,(byte)0x4D,
      (byte)0xB9,(byte)0x01,(byte)0x5E,(byte)0x18,(byte)0x54,(byte)0x88,(byte)0x4F,(byte)0x63,
      (byte)0xDE,(byte)0x41,(byte)0xCF,(byte)0xD1,(byte)0xDE,(byte)0x98,(byte)0x14,(byte)0x31,
      (byte)0xA9,(byte)0x4E,(byte)0x5A,(byte)0x1A,(byte)0x12,(byte)0xB8,(byte)0x1E,(byte)0x77,
      (byte)0xF9,(byte)0xED,(byte)0x82,(byte)0x10,(byte)0xF0,(byte)0xC9,(byte)0x44,(byte)0xD6,
      (byte)0x28,(byte)0xFB,(byte)0xFF,(byte)0xCD,(byte)0x79,(byte)0x03,(byte)0x34,(byte)0x43,
      (byte)0x53,(byte)0x60,(byte)0xEC,(byte)0x99,(byte)0xC8,(byte)0x9C,(byte)0x93,(byte)0xD2,
      (byte)0x50,(byte)0x31,(byte)0x57,(byte)0xF4,(byte)0x72,(byte)0xD7,(byte)0x71,(byte)0x22,
      (byte)0xC6,(byte)0x50,(byte)0xCE,(byte)0x37,(byte)0xBD,(byte)0x68,(byte)0x12,(byte)0x10,
      (byte)0x82,(byte)0x11,(byte)0x96,(byte)0x7F,(byte)0x3A,(byte)0x73,(byte)0x1D,(byte)0x78,
      (byte)0x51,(byte)0xAF,(byte)0x2E,(byte)0x02,(byte)0xE4,(byte)0x39,(byte)0xBD,(byte)0x08,
      (byte)0x8A,(byte)0xF5,(byte)0xB0,(byte)0x75,(byte)0x80,(byte)0xAB,(byte)0xC9,(byte)0x55
  };
  
  /** The default value for the P parameter of a 768-bit RSA key. */
  protected final byte[] rsa96P = {
      (byte)0xFA,(byte)0x08,(byte)0xA6,(byte)0x3B,(byte)0x0E,(byte)0xE9,(byte)0xCA,(byte)0x22,
      (byte)0x90,(byte)0x38,(byte)0x5B,(byte)0xC0,(byte)0x8B,(byte)0x79,(byte)0x2C,(byte)0x60,
      (byte)0x17,(byte)0x19,(byte)0xDA,(byte)0xCB,(byte)0x17,(byte)0xA7,(byte)0xA7,(byte)0x9E,
      (byte)0xB1,(byte)0xBA,(byte)0x56,(byte)0x67,(byte)0xDB,(byte)0x25,(byte)0xCB,(byte)0xF2,
      (byte)0xE4,(byte)0x08,(byte)0xAD,(byte)0x0D,(byte)0xF6,(byte)0x49,(byte)0x17,(byte)0x68,
      (byte)0x54,(byte)0xCB,(byte)0x47,(byte)0xD0,(byte)0x9D,(byte)0x7B,(byte)0x8B,(byte)0x77
  };
  
  /** The default value for the Q parameter of a 768-bit RSA key. */
  protected final byte[] rsa96Q = {
      (byte)0xEC,(byte)0xD4,(byte)0x7C,(byte)0x43,(byte)0xA0,(byte)0x81,(byte)0xE0,(byte)0x4A,
      (byte)0xDF,(byte)0x87,(byte)0x38,(byte)0xED,(byte)0x8A,(byte)0x80,(byte)0x77,(byte)0xD7,
      (byte)0xF7,(byte)0xDE,(byte)0x54,(byte)0xCB,(byte)0xB1,(byte)0x57,(byte)0x5F,(byte)0x1B,
      (byte)0xB9,(byte)0xAD,(byte)0xDD,(byte)0xBE,(byte)0xA8,(byte)0x4D,(byte)0x43,(byte)0x2B,
      (byte)0x4C,(byte)0xC0,(byte)0xCE,(byte)0x86,(byte)0xF5,(byte)0x3D,(byte)0xE8,(byte)0x73,
      (byte)0xA8,(byte)0x21,(byte)0xAC,(byte)0x4D,(byte)0xCB,(byte)0x07,(byte)0xE0,(byte)0x77
  };
  
  /** The default value for the PQ parameter of a 768-bit RSA key. */
  protected final byte[] rsa96PQ = {
      (byte)0x41,(byte)0xFC,(byte)0x84,(byte)0xD5,(byte)0x91,(byte)0x62,(byte)0x83,(byte)0xD2,
      (byte)0x50,(byte)0xF9,(byte)0xB7,(byte)0x41,(byte)0xA0,(byte)0x18,(byte)0xBE,(byte)0x93,
      (byte)0x96,(byte)0x74,(byte)0x2B,(byte)0x64,(byte)0x32,(byte)0x33,(byte)0x7D,(byte)0x1B,
      (byte)0xFB,(byte)0x97,(byte)0xC6,(byte)0xC5,(byte)0x01,(byte)0x2F,(byte)0xFF,(byte)0xA5,
      (byte)0xB2,(byte)0x2C,(byte)0xE6,(byte)0x0F,(byte)0xB8,(byte)0xD0,(byte)0xC6,(byte)0x1E,
      (byte)0x8B,(byte)0xAB,(byte)0x3E,(byte)0x43,(byte)0x4D,(byte)0xF7,(byte)0xDA,(byte)0x91
  };
  
  /** The default value for the P1 parameter of a 768-bit RSA key. */
  protected final byte[] rsa96P1 = {
      (byte)0x75,(byte)0x6C,(byte)0x3E,(byte)0x75,(byte)0x19,(byte)0xE9,(byte)0xDD,(byte)0xCE,
      (byte)0x21,(byte)0xA0,(byte)0xF6,(byte)0x26,(byte)0x14,(byte)0xDA,(byte)0x51,(byte)0x66,
      (byte)0xC7,(byte)0x32,(byte)0x93,(byte)0x38,(byte)0x31,(byte)0xE1,(byte)0xC0,(byte)0xAC,
      (byte)0x9C,(byte)0x97,(byte)0x00,(byte)0x21,(byte)0x42,(byte)0x20,(byte)0x1C,(byte)0x09,
      (byte)0xF3,(byte)0xE1,(byte)0xC7,(byte)0x33,(byte)0xF9,(byte)0x68,(byte)0x16,(byte)0x20,
      (byte)0x1F,(byte)0x42,(byte)0x60,(byte)0x75,(byte)0xAE,(byte)0x9F,(byte)0xE8,(byte)0xBD
  };
  
  /** The default value for the Q1 parameter of a 768-bit RSA key. */
  protected final byte[] rsa96Q1 = {
      (byte)0xDE,(byte)0x02,(byte)0xA3,(byte)0x2A,(byte)0xD2,(byte)0x40,(byte)0x6D,(byte)0xFE,
      (byte)0x42,(byte)0x65,(byte)0x04,(byte)0xDC,(byte)0xC9,(byte)0x45,(byte)0x7D,(byte)0x13,
      (byte)0x1B,(byte)0xED,(byte)0x74,(byte)0x18,(byte)0x2E,(byte)0xFA,(byte)0xF4,(byte)0xD1,
      (byte)0x8C,(byte)0xD2,(byte)0x8C,(byte)0x58,(byte)0xBA,(byte)0x75,(byte)0x13,(byte)0x4E,
      (byte)0x77,(byte)0xF9,(byte)0x16,(byte)0xA2,(byte)0x35,(byte)0x2B,(byte)0xFF,(byte)0xC8,
      (byte)0xCC,(byte)0x08,(byte)0x24,(byte)0xFA,(byte)0x18,(byte)0x26,(byte)0x1E,(byte)0x29
  };
	
  /** The default value for the modulus of a 1024-bit RSA key. **/
  protected final byte[] rsa128KeyModulus = {
      (byte)0xBA,(byte)0x3E,(byte)0xFF,(byte)0xAF,(byte)0xAD,(byte)0x60,(byte)0xA0,(byte)0xD2,
      (byte)0xA0,(byte)0x3D,(byte)0x7C,(byte)0x9D,(byte)0xCC,(byte)0x22,(byte)0x86,(byte)0x0A,
      (byte)0xCA,(byte)0xF8,(byte)0x9A,(byte)0xD3,(byte)0x81,(byte)0x0B,(byte)0xA5,(byte)0x65,
      (byte)0x9B,(byte)0xBB,(byte)0xB0,(byte)0x47,(byte)0xDE,(byte)0xCA,(byte)0x5A,(byte)0x41,
      (byte)0x26,(byte)0xA9,(byte)0xB1,(byte)0x50,(byte)0x77,(byte)0xAD,(byte)0x81,(byte)0xA1,
      (byte)0x3D,(byte)0xBE,(byte)0xA5,(byte)0x9A,(byte)0x58,(byte)0x6B,(byte)0xCD,(byte)0xE0,
      (byte)0x82,(byte)0xAA,(byte)0x33,(byte)0x2B,(byte)0x22,(byte)0x5C,(byte)0x78,(byte)0x00,
      (byte)0x00,(byte)0x72,(byte)0xDD,(byte)0x96,(byte)0xA0,(byte)0xBE,(byte)0xCC,(byte)0x2F,
      (byte)0xCB,(byte)0xA0,(byte)0x91,(byte)0xEB,(byte)0x45,(byte)0x14,(byte)0xE7,(byte)0x32,
      (byte)0xDE,(byte)0xF8,(byte)0xBF,(byte)0xB4,(byte)0xC7,(byte)0x1F,(byte)0x67,(byte)0x11,
      (byte)0x82,(byte)0x53,(byte)0xD9,(byte)0xA9,(byte)0x6F,(byte)0x1A,(byte)0x64,(byte)0xBA,
      (byte)0x1C,(byte)0x3C,(byte)0xF3,(byte)0x67,(byte)0xBC,(byte)0x4C,(byte)0x41,(byte)0xF2,
      (byte)0x03,(byte)0x7A,(byte)0x01,(byte)0x24,(byte)0x23,(byte)0x3B,(byte)0xB9,(byte)0x53,
      (byte)0xC4,(byte)0xF9,(byte)0x7B,(byte)0xD3,(byte)0x42,(byte)0x9C,(byte)0xED,(byte)0x64,
      (byte)0xB1,(byte)0x24,(byte)0x64,(byte)0xC8,(byte)0x7C,(byte)0xFF,(byte)0x13,(byte)0xA4,
      (byte)0x15,(byte)0x53,(byte)0xDE,(byte)0xE2,(byte)0x0E,(byte)0x73,(byte)0x50,(byte)0x1B
 };
  
  /** The default value for private exponent of a 1024-bit RSA key. **/
  protected final byte[] rsa128KeyPrivateExponent = {
      (byte)0x39,(byte)0x87,(byte)0xC4,(byte)0x4B,(byte)0x6B,(byte)0xEE,(byte)0xF1,(byte)0x3E,
      (byte)0x9E,(byte)0xA8,(byte)0xDF,(byte)0x99,(byte)0x8E,(byte)0xB9,(byte)0x0B,(byte)0x56,
      (byte)0xC2,(byte)0x23,(byte)0xD1,(byte)0x0F,(byte)0x8C,(byte)0x49,(byte)0x20,(byte)0xAA,
      (byte)0x26,(byte)0x54,(byte)0xEF,(byte)0xBB,(byte)0x03,(byte)0xA2,(byte)0xD6,(byte)0x06,
      (byte)0x51,(byte)0xFF,(byte)0x10,(byte)0xFA,(byte)0x9E,(byte)0x3D,(byte)0x46,(byte)0x51,
      (byte)0x9C,(byte)0x55,(byte)0x0B,(byte)0xAA,(byte)0x85,(byte)0xAD,(byte)0xA7,(byte)0x46,
      (byte)0xB6,(byte)0x96,(byte)0x04,(byte)0x80,(byte)0x4A,(byte)0x78,(byte)0xED,(byte)0xC8,
      (byte)0x72,(byte)0x5B,(byte)0x08,(byte)0xFF,(byte)0xC2,(byte)0x5F,(byte)0xAD,(byte)0x8A,
      (byte)0x7E,(byte)0xA3,(byte)0x1E,(byte)0xA2,(byte)0x24,(byte)0x0C,(byte)0xC0,(byte)0xC8,
      (byte)0xF7,(byte)0xA5,(byte)0x5A,(byte)0x0C,(byte)0x23,(byte)0x5C,(byte)0x55,(byte)0x56,
      (byte)0x85,(byte)0x0B,(byte)0x2D,(byte)0x09,(byte)0xD9,(byte)0xB7,(byte)0x56,(byte)0xE2,
      (byte)0x1C,(byte)0x96,(byte)0x26,(byte)0xD9,(byte)0x1F,(byte)0x49,(byte)0xAB,(byte)0xB7,
      (byte)0x69,(byte)0xB2,(byte)0xB9,(byte)0x60,(byte)0x9C,(byte)0xDF,(byte)0xD0,(byte)0x38,
      (byte)0x8A,(byte)0xDC,(byte)0x85,(byte)0x9D,(byte)0x1A,(byte)0x4A,(byte)0x7E,(byte)0x5D,
      (byte)0xDE,(byte)0x5C,(byte)0x28,(byte)0xEB,(byte)0xAA,(byte)0xDE,(byte)0x82,(byte)0x07,
      (byte)0xBD,(byte)0x6A,(byte)0x61,(byte)0x49,(byte)0x6C,(byte)0x8E,(byte)0x08,(byte)0xA1
  };
  
  /** The default value for the P parameter of a 1024-bit RSA key. */
  protected final byte[] rsa128P = {
      (byte)0xED,(byte)0xDE,(byte)0xB9,(byte)0xC5,(byte)0x1F,(byte)0x6E,(byte)0x4E,(byte)0x58,
      (byte)0x3C,(byte)0x9B,(byte)0x3C,(byte)0x83,(byte)0xB6,(byte)0xEF,(byte)0x6A,(byte)0x33,
      (byte)0x8D,(byte)0x2C,(byte)0x68,(byte)0x54,(byte)0x9D,(byte)0xE4,(byte)0x6D,(byte)0x3C,
      (byte)0x26,(byte)0xB2,(byte)0xF2,(byte)0xCF,(byte)0x43,(byte)0xB9,(byte)0x4D,(byte)0x2E,
      (byte)0xE2,(byte)0xC1,(byte)0x38,(byte)0x63,(byte)0xE7,(byte)0xBB,(byte)0x63,(byte)0xFF,
      (byte)0xE4,(byte)0xAD,(byte)0xAB,(byte)0x9F,(byte)0xD2,(byte)0x9C,(byte)0x81,(byte)0xB1,
      (byte)0x14,(byte)0x69,(byte)0x10,(byte)0x0F,(byte)0x91,(byte)0x8B,(byte)0x26,(byte)0xFC,
      (byte)0x5A,(byte)0xBB,(byte)0xB3,(byte)0xF0,(byte)0xB6,(byte)0x9E,(byte)0x99,(byte)0x6D
  };
  
  /** The default value for the Q parameter of a 1024-bit RSA key. */
  protected final byte[] rsa128Q = {
      (byte)0xC8,(byte)0x70,(byte)0xFF,(byte)0x2E,(byte)0xDD,(byte)0x2D,(byte)0xF2,(byte)0x43,
      (byte)0x48,(byte)0xE7,(byte)0xC8,(byte)0xE0,(byte)0x43,(byte)0xB9,(byte)0xB7,(byte)0x54,
      (byte)0x7E,(byte)0x6A,(byte)0x22,(byte)0x9C,(byte)0x82,(byte)0x49,(byte)0x55,(byte)0x1A,
      (byte)0x44,(byte)0x58,(byte)0x08,(byte)0x98,(byte)0xCC,(byte)0x4D,(byte)0xD2,(byte)0x67,
      (byte)0x19,(byte)0x83,(byte)0x13,(byte)0xAC,(byte)0x2C,(byte)0x52,(byte)0x30,(byte)0x18,
      (byte)0x19,(byte)0x4A,(byte)0x23,(byte)0x56,(byte)0xB1,(byte)0xEA,(byte)0x8F,(byte)0x82,
      (byte)0x7C,(byte)0xAF,(byte)0xE8,(byte)0x87,(byte)0x19,(byte)0x26,(byte)0xF9,(byte)0xFB,
      (byte)0x0B,(byte)0xC0,(byte)0xCD,(byte)0x5D,(byte)0xEB,(byte)0xD7,(byte)0xE2,(byte)0xA7
  };
  
  /** The default value for the PQ parameter of a 1024-bit RSA key. */
  protected final byte[] rsa128PQ = {
      (byte)0x3A,(byte)0xEA,(byte)0x12,(byte)0xEC,(byte)0xFE,(byte)0xD6,(byte)0xEC,(byte)0xD6,
      (byte)0x38,(byte)0x28,(byte)0x92,(byte)0xE4,(byte)0xA1,(byte)0x89,(byte)0xFA,(byte)0x1B,
      (byte)0xDC,(byte)0xD1,(byte)0x8B,(byte)0xF6,(byte)0xB8,(byte)0xF0,(byte)0xD8,(byte)0xF2,
      (byte)0x1A,(byte)0x28,(byte)0x9A,(byte)0xD2,(byte)0xAD,(byte)0xDD,(byte)0x4F,(byte)0x1B,
      (byte)0x99,(byte)0xF6,(byte)0x3B,(byte)0xED,(byte)0x73,(byte)0x1C,(byte)0x4F,(byte)0xAF,
      (byte)0x23,(byte)0x8B,(byte)0x39,(byte)0xAA,(byte)0x62,(byte)0xCA,(byte)0xAF,(byte)0xC2,
      (byte)0x37,(byte)0xA8,(byte)0xB9,(byte)0xC4,(byte)0x70,(byte)0x92,(byte)0x13,(byte)0xC6,
      (byte)0x3C,(byte)0xDA,(byte)0x6E,(byte)0xC2,(byte)0x79,(byte)0x02,(byte)0x8F,(byte)0xF2
  };
  
  /** The default value for the P1 parameter of a 1024-bit RSA key. */
  protected final byte[] rsa128P1 = {
      (byte)0x7B,(byte)0x1A,(byte)0x82,(byte)0x6F,(byte)0xD7,(byte)0x05,(byte)0x62,(byte)0x3C,
      (byte)0x5E,(byte)0x19,(byte)0x44,(byte)0xE7,(byte)0x31,(byte)0xBC,(byte)0x93,(byte)0xEC,
      (byte)0xDC,(byte)0x09,(byte)0xF8,(byte)0x70,(byte)0x9A,(byte)0x4A,(byte)0x46,(byte)0x92,
      (byte)0x13,(byte)0xC1,(byte)0x16,(byte)0xD2,(byte)0x57,(byte)0x4D,(byte)0x45,(byte)0xF9,
      (byte)0x96,(byte)0xD6,(byte)0xC2,(byte)0x95,(byte)0x49,(byte)0xAF,(byte)0x7C,(byte)0x60,
      (byte)0x49,(byte)0x7B,(byte)0xEB,(byte)0xCF,(byte)0x49,(byte)0xD3,(byte)0x3F,(byte)0x77,
      (byte)0x62,(byte)0x85,(byte)0xC1,(byte)0x0F,(byte)0x1D,(byte)0x96,(byte)0xB3,(byte)0x75,
      (byte)0x74,(byte)0x8B,(byte)0xA1,(byte)0xE3,(byte)0x58,(byte)0xCF,(byte)0x99,(byte)0xBD
  };
  
  /** The default value for the Q1 parameter of a 1024-bit RSA key. */
  protected final byte[] rsa128Q1 = {
      (byte)0x71,(byte)0xA6,(byte)0x18,(byte)0x1A,(byte)0x53,(byte)0x50,(byte)0x64,(byte)0xE7,
      (byte)0x9F,(byte)0xA3,(byte)0xC4,(byte)0x72,(byte)0xDC,(byte)0x13,(byte)0xA6,(byte)0x0E,
      (byte)0x23,(byte)0x6B,(byte)0x3C,(byte)0x5A,(byte)0xAF,(byte)0x48,(byte)0xB3,(byte)0x17,
      (byte)0x24,(byte)0x9F,(byte)0x21,(byte)0xA8,(byte)0xB9,(byte)0x56,(byte)0x7A,(byte)0xB0,
      (byte)0xF8,(byte)0x77,(byte)0x28,(byte)0xA5,(byte)0x5B,(byte)0xAF,(byte)0xF2,(byte)0x13,
      (byte)0x07,(byte)0xEB,(byte)0xD0,(byte)0x63,(byte)0xAC,(byte)0x97,(byte)0x49,(byte)0x6D,
      (byte)0x7C,(byte)0x13,(byte)0x25,(byte)0x6D,(byte)0xCC,(byte)0x66,(byte)0x1C,(byte)0x21,
      (byte)0x2A,(byte)0xC5,(byte)0xD3,(byte)0xEB,(byte)0xA7,(byte)0xF8,(byte)0x8D,(byte)0x4B
  };
	
  /** The default value for modulus of a 2048-bit RSA key. **/
  protected final byte[] rsa256KeyModulus = {
      (byte)0xD6,(byte)0xFC,(byte)0xB5,(byte)0xCB,(byte)0xC1,(byte)0x62,(byte)0x84,(byte)0xC0,
      (byte)0x06,(byte)0x4E,(byte)0xE6,(byte)0xD7,(byte)0xC5,(byte)0xBF,(byte)0x73,(byte)0xE7,
      (byte)0x18,(byte)0x79,(byte)0x7E,(byte)0x29,(byte)0x78,(byte)0xC8,(byte)0x3F,(byte)0x6C,
      (byte)0x8E,(byte)0x99,(byte)0x0E,(byte)0x40,(byte)0x40,(byte)0xE1,(byte)0x3C,(byte)0x64,
      (byte)0x44,(byte)0x43,(byte)0x18,(byte)0xD0,(byte)0x62,(byte)0xA9,(byte)0x52,(byte)0x24,
      (byte)0x80,(byte)0xB4,(byte)0x4E,(byte)0x54,(byte)0xB6,(byte)0x09,(byte)0xD9,(byte)0x42,
      (byte)0x0D,(byte)0x3D,(byte)0x01,(byte)0x24,(byte)0x48,(byte)0x95,(byte)0xDE,(byte)0x8D,
      (byte)0xB9,(byte)0xB0,(byte)0x4C,(byte)0x42,(byte)0xCE,(byte)0x82,(byte)0xF9,(byte)0x5D,
      (byte)0x86,(byte)0x29,(byte)0x2E,(byte)0xA9,(byte)0x90,(byte)0xB0,(byte)0xE4,(byte)0x08,
      (byte)0xF7,(byte)0xC8,(byte)0x75,(byte)0x9A,(byte)0xC7,(byte)0x67,(byte)0x84,(byte)0x93,
      (byte)0x33,(byte)0xCD,(byte)0x7B,(byte)0xB9,(byte)0x5D,(byte)0x76,(byte)0x08,(byte)0xA8,
      (byte)0x3A,(byte)0x0C,(byte)0x41,(byte)0x8A,(byte)0xD4,(byte)0xC3,(byte)0x11,(byte)0xA2,
      (byte)0xA9,(byte)0x11,(byte)0x76,(byte)0x58,(byte)0xA5,(byte)0xF1,(byte)0x91,(byte)0xF0,
      (byte)0x83,(byte)0x1E,(byte)0x43,(byte)0x37,(byte)0x61,(byte)0x56,(byte)0x80,(byte)0xEC,
      (byte)0x93,(byte)0x6A,(byte)0xE0,(byte)0x31,(byte)0xD0,(byte)0x9F,(byte)0x27,(byte)0x9D,
      (byte)0x9C,(byte)0x61,(byte)0x19,(byte)0xA7,(byte)0x5D,(byte)0x3F,(byte)0xE5,(byte)0x93,
      (byte)0x27,(byte)0xA5,(byte)0xBD,(byte)0xFE,(byte)0x72,(byte)0xCE,(byte)0xAB,(byte)0x0B,
      (byte)0x68,(byte)0x22,(byte)0x01,(byte)0x05,(byte)0xD5,(byte)0xE6,(byte)0xFF,(byte)0x03,
      (byte)0x61,(byte)0xB1,(byte)0xAC,(byte)0x08,(byte)0xFF,(byte)0x9E,(byte)0xF6,(byte)0x57,
      (byte)0xBA,(byte)0x44,(byte)0x33,(byte)0x97,(byte)0x57,(byte)0x41,(byte)0x22,(byte)0xB4,
      (byte)0x4F,(byte)0x6C,(byte)0x78,(byte)0x02,(byte)0x2F,(byte)0xCB,(byte)0x78,(byte)0xEA,
      (byte)0x0E,(byte)0xE8,(byte)0x29,(byte)0x88,(byte)0x1B,(byte)0x65,(byte)0x46,(byte)0xB5,
      (byte)0x1F,(byte)0xDF,(byte)0x4C,(byte)0xCE,(byte)0xD3,(byte)0xBC,(byte)0x73,(byte)0x02,
      (byte)0x7B,(byte)0x18,(byte)0x49,(byte)0xBD,(byte)0xAC,(byte)0x4D,(byte)0xA7,(byte)0x6C,
      (byte)0x6F,(byte)0x6B,(byte)0x57,(byte)0x64,(byte)0x32,(byte)0xE7,(byte)0x69,(byte)0x31,
      (byte)0x89,(byte)0x52,(byte)0xF7,(byte)0x1D,(byte)0x03,(byte)0xFD,(byte)0x01,(byte)0xD7,
      (byte)0x55,(byte)0xB6,(byte)0xA5,(byte)0x87,(byte)0x9C,(byte)0xD9,(byte)0x72,(byte)0x17,
      (byte)0xAF,(byte)0xD0,(byte)0x2A,(byte)0x95,(byte)0x3A,(byte)0x16,(byte)0x00,(byte)0x58,
      (byte)0x51,(byte)0x92,(byte)0xF2,(byte)0xF7,(byte)0x9A,(byte)0x43,(byte)0xDE,(byte)0x22,
      (byte)0x88,(byte)0xDD,(byte)0x72,(byte)0xA8,(byte)0xB9,(byte)0x63,(byte)0x80,(byte)0x49,
      (byte)0x63,(byte)0xE5,(byte)0x74,(byte)0x6B,(byte)0xF3,(byte)0xEF,(byte)0xCE,(byte)0xAA,
      (byte)0xD6,(byte)0x6D,(byte)0x32,(byte)0x20,(byte)0x4C,(byte)0x9E,(byte)0x9A,(byte)0xA1
  };
  
  /** The default value for private exponent of a 2048-bit RSA key. **/
  protected final byte[] rsa256KeyPrivateExponent = {
      (byte)0xC4,(byte)0x35,(byte)0xCE,(byte)0x21,(byte)0xD1,(byte)0x34,(byte)0x7E,(byte)0x1D,
      (byte)0xD7,(byte)0x64,(byte)0x09,(byte)0x91,(byte)0x22,(byte)0x7C,(byte)0x92,(byte)0x66,
      (byte)0x76,(byte)0xD2,(byte)0xE3,(byte)0x4F,(byte)0x2C,(byte)0x59,(byte)0xEE,(byte)0x70,
      (byte)0xC0,(byte)0x50,(byte)0x76,(byte)0x4E,(byte)0x34,(byte)0x28,(byte)0x9C,(byte)0xFA,
      (byte)0x91,(byte)0xC6,(byte)0x7F,(byte)0x0E,(byte)0x29,(byte)0x0D,(byte)0x89,(byte)0xD7,
      (byte)0xA0,(byte)0xD3,(byte)0x6E,(byte)0xAE,(byte)0x27,(byte)0x9A,(byte)0x23,(byte)0x7C,
      (byte)0x02,(byte)0x23,(byte)0x0C,(byte)0x38,(byte)0xB6,(byte)0x3A,(byte)0x79,(byte)0xEC,
      (byte)0xF5,(byte)0x6D,(byte)0x2E,(byte)0x9C,(byte)0xC6,(byte)0x67,(byte)0x88,(byte)0xF9,
      (byte)0x4F,(byte)0x69,(byte)0xA4,(byte)0x99,(byte)0xC3,(byte)0x61,(byte)0x7E,(byte)0x2D,
      (byte)0xA5,(byte)0x1F,(byte)0x82,(byte)0x1E,(byte)0x2A,(byte)0x21,(byte)0x93,(byte)0x40,
      (byte)0xD9,(byte)0xC5,(byte)0x8F,(byte)0x46,(byte)0xE5,(byte)0x42,(byte)0xC5,(byte)0xB1,
      (byte)0xEB,(byte)0x90,(byte)0xA5,(byte)0xFC,(byte)0xF4,(byte)0x23,(byte)0xB8,(byte)0xA3,
      (byte)0xB1,(byte)0x14,(byte)0x2B,(byte)0xE3,(byte)0xCA,(byte)0x48,(byte)0x08,(byte)0x3E,
      (byte)0xEF,(byte)0x1C,(byte)0x1E,(byte)0x92,(byte)0x9B,(byte)0xB6,(byte)0xDC,(byte)0x61,
      (byte)0x8E,(byte)0x45,(byte)0xBB,(byte)0xAA,(byte)0x1B,(byte)0x52,(byte)0x36,(byte)0x50,
      (byte)0xC5,(byte)0x99,(byte)0x65,(byte)0x55,(byte)0x77,(byte)0x68,(byte)0xCA,(byte)0xB7,
      (byte)0x6F,(byte)0xFB,(byte)0x31,(byte)0x7F,(byte)0xF6,(byte)0xA2,(byte)0xCC,(byte)0x0F,
      (byte)0x25,(byte)0x82,(byte)0x36,(byte)0x80,(byte)0xDF,(byte)0x1C,(byte)0xE6,(byte)0x1F,
      (byte)0xE1,(byte)0x77,(byte)0x52,(byte)0xBB,(byte)0x4A,(byte)0x09,(byte)0xD1,(byte)0x2B,
      (byte)0x5A,(byte)0xA6,(byte)0xA7,(byte)0xCB,(byte)0xBB,(byte)0x26,(byte)0xDE,(byte)0xA4,
      (byte)0xD9,(byte)0x4C,(byte)0x9F,(byte)0x8A,(byte)0xDD,(byte)0x79,(byte)0x79,(byte)0xD0,
      (byte)0x05,(byte)0x60,(byte)0x40,(byte)0x4A,(byte)0xED,(byte)0x95,(byte)0x70,(byte)0xC9,
      (byte)0x60,(byte)0x2C,(byte)0x4A,(byte)0x6F,(byte)0xBF,(byte)0x13,(byte)0xA4,(byte)0x17,
      (byte)0x21,(byte)0x3B,(byte)0xB5,(byte)0xC2,(byte)0xFC,(byte)0x86,(byte)0x94,(byte)0xFB,
      (byte)0xF6,(byte)0x92,(byte)0x37,(byte)0x68,(byte)0xD7,(byte)0x50,(byte)0xA7,(byte)0xBE,
      (byte)0x21,(byte)0x3D,(byte)0x19,(byte)0x66,(byte)0x4B,(byte)0x49,(byte)0xD4,(byte)0x70,
      (byte)0xBF,(byte)0x7D,(byte)0x59,(byte)0x42,(byte)0x24,(byte)0xD9,(byte)0x08,(byte)0x5C,
      (byte)0x43,(byte)0x71,(byte)0xE6,(byte)0xC7,(byte)0xB2,(byte)0x7C,(byte)0x86,(byte)0x14,
      (byte)0x6B,(byte)0xE7,(byte)0x94,(byte)0x78,(byte)0x52,(byte)0x3C,(byte)0xD5,(byte)0x98,
      (byte)0x0D,(byte)0x47,(byte)0xD9,(byte)0xD9,(byte)0x2A,(byte)0xE0,(byte)0xC9,(byte)0xA8,
      (byte)0xEA,(byte)0x29,(byte)0xE2,(byte)0x41,(byte)0x76,(byte)0xCA,(byte)0xF3,(byte)0x96,
      (byte)0x5F,(byte)0xD0,(byte)0xB9,(byte)0x7A,(byte)0x2E,(byte)0x63,(byte)0x8B,(byte)0xD5
  };
  
  /** The default value for the P parameter of a 2048-bit RSA key. */
  protected final byte[] rsa256P = {
      (byte)0xEC,(byte)0x17,(byte)0xC7,(byte)0xEB,(byte)0x8E,(byte)0x86,(byte)0x16,(byte)0xAA,
      (byte)0xAF,(byte)0xDF,(byte)0xA9,(byte)0x2E,(byte)0x4E,(byte)0x6C,(byte)0x0E,(byte)0x8F,
      (byte)0x19,(byte)0xFD,(byte)0x85,(byte)0x32,(byte)0xA6,(byte)0x6A,(byte)0xAE,(byte)0xD2,
      (byte)0x20,(byte)0x41,(byte)0x4E,(byte)0x8F,(byte)0x1C,(byte)0x27,(byte)0xDE,(byte)0x1A,
      (byte)0x84,(byte)0x5A,(byte)0x39,(byte)0x1A,(byte)0x2F,(byte)0xD2,(byte)0x30,(byte)0x99,
      (byte)0xE2,(byte)0x74,(byte)0x6F,(byte)0xB5,(byte)0xC4,(byte)0x30,(byte)0x3C,(byte)0xA6,
      (byte)0xBE,(byte)0xE0,(byte)0x4C,(byte)0x82,(byte)0xE6,(byte)0x65,(byte)0x4B,(byte)0x8C,
      (byte)0x60,(byte)0x56,(byte)0xC4,(byte)0x8D,(byte)0xAB,(byte)0xCD,(byte)0x11,(byte)0x99,
      (byte)0x14,(byte)0xED,(byte)0xA5,(byte)0xB2,(byte)0x12,(byte)0xE2,(byte)0x53,(byte)0xCF,
      (byte)0x8F,(byte)0x56,(byte)0x8E,(byte)0xFD,(byte)0x2E,(byte)0x73,(byte)0x26,(byte)0x89,
      (byte)0x32,(byte)0x9C,(byte)0xF2,(byte)0x64,(byte)0x3F,(byte)0x4B,(byte)0x4E,(byte)0xD0,
      (byte)0x55,(byte)0x26,(byte)0x5E,(byte)0x0F,(byte)0x19,(byte)0x1F,(byte)0x97,(byte)0x1B,
      (byte)0x84,(byte)0x23,(byte)0x04,(byte)0xF6,(byte)0x38,(byte)0x23,(byte)0xB3,(byte)0xDE,
      (byte)0x8C,(byte)0xE9,(byte)0x57,(byte)0x10,(byte)0x83,(byte)0x7E,(byte)0x9E,(byte)0xA1,
      (byte)0x08,(byte)0xEB,(byte)0xA4,(byte)0x39,(byte)0x8C,(byte)0xDA,(byte)0x4A,(byte)0xD6,
      (byte)0xC5,(byte)0x56,(byte)0xB3,(byte)0xCA,(byte)0x96,(byte)0x01,(byte)0xE0,(byte)0xAF
  };
  
  /** The default value for the Q parameter of a 2048-bit RSA key. */
  protected final byte[] rsa256Q = {
      (byte)0xE9,(byte)0x1D,(byte)0x59,(byte)0x11,(byte)0xD5,(byte)0x80,(byte)0x5B,(byte)0xA2,
      (byte)0x3C,(byte)0x54,(byte)0x7D,(byte)0x84,(byte)0xB8,(byte)0xA7,(byte)0x79,(byte)0xDB,
      (byte)0x2F,(byte)0x9F,(byte)0x9F,(byte)0xBB,(byte)0x64,(byte)0xDA,(byte)0x9B,(byte)0xAB,
      (byte)0x9B,(byte)0xDC,(byte)0x37,(byte)0xF6,(byte)0xD4,(byte)0x1D,(byte)0x6A,(byte)0x8A,
      (byte)0x39,(byte)0x0B,(byte)0x44,(byte)0x05,(byte)0xE6,(byte)0x62,(byte)0xEC,(byte)0xB4,
      (byte)0xC1,(byte)0xDB,(byte)0x7A,(byte)0x99,(byte)0xD5,(byte)0x0F,(byte)0x26,(byte)0xAD,
      (byte)0x67,(byte)0x16,(byte)0x85,(byte)0x7E,(byte)0x97,(byte)0x74,(byte)0xC8,(byte)0xAE,
      (byte)0x7C,(byte)0xE8,(byte)0xF5,(byte)0xE6,(byte)0x03,(byte)0x23,(byte)0xFF,(byte)0x7B,
      (byte)0xD8,(byte)0xAC,(byte)0x61,(byte)0x69,(byte)0x44,(byte)0x88,(byte)0xE5,(byte)0x06,
      (byte)0x1B,(byte)0x33,(byte)0xBD,(byte)0x7D,(byte)0xDE,(byte)0x00,(byte)0xFA,(byte)0x9C,
      (byte)0x6A,(byte)0x18,(byte)0xC2,(byte)0x5D,(byte)0x42,(byte)0xB9,(byte)0x1D,(byte)0xE2,
      (byte)0x78,(byte)0x91,(byte)0x25,(byte)0x26,(byte)0xD8,(byte)0x9B,(byte)0xAC,(byte)0x2B,
      (byte)0x21,(byte)0x62,(byte)0xA0,(byte)0x37,(byte)0x7A,(byte)0xC3,(byte)0xD5,(byte)0x4F,
      (byte)0xED,(byte)0x0A,(byte)0xDC,(byte)0x18,(byte)0xA8,(byte)0xB1,(byte)0x4D,(byte)0x02,
      (byte)0x90,(byte)0xD9,(byte)0x60,(byte)0xA9,(byte)0xA8,(byte)0x01,(byte)0x73,(byte)0xF3,
      (byte)0xD3,(byte)0xB3,(byte)0x06,(byte)0x60,(byte)0x0D,(byte)0xEC,(byte)0xED,(byte)0xAF
  };
  
  /** The default value for the PQ parameter of a 2048-bit RSA key. */
  protected final byte[] rsa256PQ = {
      (byte)0x32,(byte)0x58,(byte)0x44,(byte)0x2D,(byte)0x33,(byte)0xCE,(byte)0x84,(byte)0x0B,
      (byte)0xDB,(byte)0xEF,(byte)0xA0,(byte)0x2E,(byte)0xD9,(byte)0xF1,(byte)0x79,(byte)0xB1,
      (byte)0xB1,(byte)0x5A,(byte)0x2D,(byte)0x63,(byte)0xE0,(byte)0x64,(byte)0x3F,(byte)0x6F,
      (byte)0xB2,(byte)0x97,(byte)0x10,(byte)0x3C,(byte)0xD2,(byte)0x34,(byte)0x09,(byte)0x53,
      (byte)0x34,(byte)0x73,(byte)0x5D,(byte)0x0B,(byte)0x9D,(byte)0xB5,(byte)0x50,(byte)0x7B,
      (byte)0x53,(byte)0x2B,(byte)0x1E,(byte)0xAC,(byte)0xAC,(byte)0xC3,(byte)0x0D,(byte)0x56,
      (byte)0x26,(byte)0x1B,(byte)0x36,(byte)0x46,(byte)0xC0,(byte)0x8D,(byte)0x6B,(byte)0xB6,
      (byte)0x31,(byte)0x83,(byte)0x3E,(byte)0x02,(byte)0x38,(byte)0x70,(byte)0x2C,(byte)0x85,
      (byte)0x93,(byte)0x32,(byte)0x76,(byte)0x12,(byte)0x7D,(byte)0x1D,(byte)0x2C,(byte)0x36,
      (byte)0x90,(byte)0x6E,(byte)0xD0,(byte)0x46,(byte)0xDE,(byte)0xEA,(byte)0xDC,(byte)0xE7,
      (byte)0xA4,(byte)0x09,(byte)0x92,(byte)0xB4,(byte)0xB4,(byte)0x71,(byte)0xB4,(byte)0xA6,
      (byte)0xAA,(byte)0x41,(byte)0xC7,(byte)0x23,(byte)0xD7,(byte)0xE3,(byte)0xA2,(byte)0x64,
      (byte)0xE5,(byte)0xC3,(byte)0x02,(byte)0x48,(byte)0x0E,(byte)0xD9,(byte)0x61,(byte)0xCE,
      (byte)0x60,(byte)0x97,(byte)0x01,(byte)0x3B,(byte)0xE7,(byte)0xDC,(byte)0x84,(byte)0xCE,
      (byte)0xAC,(byte)0x4E,(byte)0x03,(byte)0x61,(byte)0x74,(byte)0xBC,(byte)0x96,(byte)0xF9,
      (byte)0x12,(byte)0x3C,(byte)0x64,(byte)0xD2,(byte)0xF5,(byte)0xD6,(byte)0xF9,(byte)0x19
  };
  
  /** The default value for the P1 parameter of a 2048-bit RSA key. */
  protected final byte[] rsa256P1 = {
      (byte)0xC7,(byte)0xFF,(byte)0x19,(byte)0x37,(byte)0x3D,(byte)0x63,(byte)0xEF,(byte)0x7D,
      (byte)0xA6,(byte)0x40,(byte)0xE4,(byte)0x93,(byte)0x3A,(byte)0x91,(byte)0xA4,(byte)0xFF,
      (byte)0xAA,(byte)0x77,(byte)0xAD,(byte)0xC7,(byte)0x0B,(byte)0x5C,(byte)0xA2,(byte)0x3D,
      (byte)0x94,(byte)0x5F,(byte)0x5E,(byte)0x4A,(byte)0x33,(byte)0x02,(byte)0xBE,(byte)0xCE,
      (byte)0x5D,(byte)0xC2,(byte)0x04,(byte)0x4F,(byte)0x5F,(byte)0xA5,(byte)0x41,(byte)0xD0,
      (byte)0x8A,(byte)0x1A,(byte)0x32,(byte)0xAB,(byte)0x9A,(byte)0xC7,(byte)0x76,(byte)0x09,
      (byte)0x96,(byte)0xF6,(byte)0x71,(byte)0x3A,(byte)0x0E,(byte)0x2C,(byte)0x4F,(byte)0x04,
      (byte)0x5A,(byte)0x74,(byte)0x06,(byte)0x4B,(byte)0x30,(byte)0xF7,(byte)0x25,(byte)0xEA,
      (byte)0x34,(byte)0xE5,(byte)0x60,(byte)0x10,(byte)0xEA,(byte)0x98,(byte)0x59,(byte)0x81,
      (byte)0x21,(byte)0x9E,(byte)0xA4,(byte)0xC0,(byte)0x6B,(byte)0x01,(byte)0xD6,(byte)0xEA,
      (byte)0x30,(byte)0x3A,(byte)0xED,(byte)0xC6,(byte)0xE8,(byte)0x2B,(byte)0x46,(byte)0x57,
      (byte)0x8B,(byte)0x5A,(byte)0x56,(byte)0x21,(byte)0x9A,(byte)0x19,(byte)0xBD,(byte)0xAA,
      (byte)0xEC,(byte)0x93,(byte)0xB1,(byte)0xD7,(byte)0x56,(byte)0x15,(byte)0x40,(byte)0x80,
      (byte)0xCD,(byte)0x83,(byte)0xB9,(byte)0x62,(byte)0x5E,(byte)0xD1,(byte)0xFB,(byte)0x54,
      (byte)0xD5,(byte)0x36,(byte)0xB0,(byte)0xC6,(byte)0xA3,(byte)0xC0,(byte)0x23,(byte)0xD7,
      (byte)0xAE,(byte)0x11,(byte)0xD5,(byte)0x7A,(byte)0x4E,(byte)0xFA,(byte)0xC6,(byte)0x37
  };
  
  /** The default value for the Q1 parameter of a 2048-bit RSA key. */
  protected final byte[] rsa256Q1 = {
      (byte)0x99,(byte)0xD3,(byte)0x61,(byte)0xE9,(byte)0x20,(byte)0xC7,(byte)0x98,(byte)0xB0,
      (byte)0x0F,(byte)0xBB,(byte)0x79,(byte)0x30,(byte)0x51,(byte)0x61,(byte)0x42,(byte)0x49,
      (byte)0xDE,(byte)0xBD,(byte)0x28,(byte)0x7C,(byte)0x51,(byte)0xEA,(byte)0xE7,(byte)0x7A,
      (byte)0x70,(byte)0x58,(byte)0xFB,(byte)0x1D,(byte)0x07,(byte)0x8F,(byte)0x79,(byte)0xB4,
      (byte)0x48,(byte)0x3C,(byte)0x24,(byte)0xE0,(byte)0xF7,(byte)0xCC,(byte)0x23,(byte)0x82,
      (byte)0x8B,(byte)0xC1,(byte)0xB6,(byte)0xBF,(byte)0x38,(byte)0x16,(byte)0xCD,(byte)0x60,
      (byte)0xF3,(byte)0x7B,(byte)0xAB,(byte)0x0F,(byte)0x84,(byte)0x05,(byte)0xEE,(byte)0x3F,
      (byte)0x25,(byte)0xF1,(byte)0xDC,(byte)0x01,(byte)0xB1,(byte)0xE4,(byte)0xD9,(byte)0x3B,
      (byte)0xF2,(byte)0x18,(byte)0x9E,(byte)0x17,(byte)0x06,(byte)0xC0,(byte)0x86,(byte)0xD0,
      (byte)0x66,(byte)0xB6,(byte)0xD7,(byte)0xBD,(byte)0xEC,(byte)0xF7,(byte)0x1C,(byte)0x68,
      (byte)0x86,(byte)0xA2,(byte)0x5B,(byte)0xEF,(byte)0x8A,(byte)0x8D,(byte)0xF9,(byte)0x28,
      (byte)0x6E,(byte)0x82,(byte)0xE8,(byte)0xCF,(byte)0x1F,(byte)0x74,(byte)0x6A,(byte)0x41,
      (byte)0xF3,(byte)0xBF,(byte)0xCF,(byte)0x15,(byte)0x8D,(byte)0x0F,(byte)0x18,(byte)0xFD,
      (byte)0xAA,(byte)0xDF,(byte)0xD5,(byte)0xA8,(byte)0xF7,(byte)0xF8,(byte)0x37,(byte)0x67,
      (byte)0x10,(byte)0x0A,(byte)0x41,(byte)0x7C,(byte)0xF2,(byte)0x7E,(byte)0x32,(byte)0xF3,
      (byte)0x9C,(byte)0xA8,(byte)0xAF,(byte)0xF6,(byte)0x46,(byte)0x7A,(byte)0x27,(byte)0xC5
  };
  
  //===========================================================================
  // Keys
  //===========================================================================
  
  /** The dummy class. */
  protected DummyClass dummy;
  
  /** The dummy interface. */
  protected DummyInterface dummyInterface;
	
  /** The keys. */
  private Key[] keys;
  
  /** The current key. */
  protected Key key;
  
  /** The current DES key. */
  protected DESKey desKey;
  
  /** The current private RSA key. */
  protected RSAPrivateKey rsaPrivateKey;
  
  /** The current private RSA CRT key. */
  protected RSAPrivateCrtKey rsaPrivateCrtKey;
  
  /** The current public RSA key. */
  protected RSAPublicKey rsaPublicKey;
  
  /** The key information. */
  protected KeyInfo keyInfo;
  
  /** The reader used to read key information. */
  protected ByteArrayReader reader;
  
  //===========================================================================
  // Constructor
  //===========================================================================
  
  protected KeyTemplateApplet() {		
    keyInfo = new KeyInfo();
	dummy = new DummyClass();
	dummyInterface = dummy;
	keys = new Key[36]; // 2(keyType)*3(keyLength)*2(keyEncryption) for DES keys 
	                    // + 3*4*2 for RSA keys
  }
  
  //===========================================================================
  // Useful methods for initialization of keys
  //===========================================================================
  
  /**
   * Reads key information among incoming data, builds a new 
   * <tt>Key</tt> object with the read parameters.
   * 
   * @param apduBuffer the APDU buffer where are read incoming data.
   */
  protected void init(byte[] apduBuffer) {
	if (reader == null)
      reader = new ByteArrayReader(apduBuffer,ISO7816.OFFSET_CDATA);
	else
	  reader.reset(apduBuffer,ISO7816.OFFSET_CDATA);
    
	byte keyType = keyInfo.getKeyType();
	short keyLength = keyInfo.getKeyLength();
	boolean keyEncryption = keyInfo.getKeyEncryption();
	keyInfo.read(reader);
	if ((keyInfo.getKeyType() == keyType) &&
	    (keyInfo.getKeyLength() == keyLength) &&
	    (keyInfo.getKeyEncryption() == keyEncryption))
	  return;
	
	buildKey();
  }	
  
  /**
   * Builds and initializes a new <tt>Key</tt> object according to the read key
   * information.
   */
  protected void buildKey() {
    for (short s = 0; s < (short)keys.length; s++) {
	  if (keys[s] == null) { 
	    try{
		  keys[s] = KeyBuilder.buildKey(
		      (keyInfo.getKeyType()== KeyInfo.TYPE_RSA_CRT_PUBLIC)?KeyBuilder.TYPE_RSA_PUBLIC:keyInfo.getKeyType(),
		      keyInfo.getKeyLength(),keyInfo.getKeyEncryption());
		  key = keys[s];
		  switch (key.getType()) {
		    // DES Keys
		    case KeyBuilder.TYPE_DES:
		    case KeyBuilder.TYPE_DES_TRANSIENT_DESELECT:
		    case KeyBuilder.TYPE_DES_TRANSIENT_RESET:
			  desKey = (DESKey) key;
			  rsaPrivateKey = null; rsaPublicKey = null; rsaPrivateCrtKey = null;
		      switch (keyInfo.getKeyLength()) {
		        case KeyBuilder.LENGTH_DES:
		          desKey.setKey(des64Key,(short)0);
		          break;
		        case KeyBuilder.LENGTH_DES3_2KEY:
		          desKey.setKey(des128Key,(short)0);
		          break;
		        case KeyBuilder.LENGTH_DES3_3KEY:
		    	  desKey.setKey(des192Key,(short)0);
		    	  break;
		        default:
		          break;
		      }
		      break;
		  
		    // RSA Private Keys
		    case KeyBuilder.TYPE_RSA_PRIVATE:
		      rsaPrivateKey = (RSAPrivateKey) key;
		      desKey = null; rsaPublicKey = null; rsaPrivateCrtKey = null;
		      switch (key.getSize()) {
		        case KeyBuilder.LENGTH_RSA_512:
		          rsaPrivateKey.setModulus(
		              rsa64KeyModulus,(short)0,(short)rsa64KeyModulus.length);
		          rsaPrivateKey.setExponent(
		        	  rsa64KeyPrivateExponent,(short)0,(short)rsa64KeyPrivateExponent.length);
		          break;
		        case KeyBuilder.LENGTH_RSA_768:
		    	  rsaPrivateKey.setModulus(
		    	      rsa96KeyModulus,(short)0,(short)rsa96KeyModulus.length);
		    	  rsaPrivateKey.setExponent(
		    	      rsa96KeyPrivateExponent,(short)0,(short)rsa96KeyPrivateExponent.length);
		          break;
		        case KeyBuilder.LENGTH_RSA_1024:
		    	  rsaPrivateKey.setModulus(
		  	          rsa128KeyModulus,(short)0,(short)rsa128KeyModulus.length);
		  	      rsaPrivateKey.setExponent(
		  	    	  rsa128KeyPrivateExponent,(short)0,(short)rsa128KeyPrivateExponent.length);
		          break;
		        case KeyBuilder.LENGTH_RSA_2048:
		    	  rsaPrivateKey.setModulus(
		  	  	      rsa256KeyModulus,(short)0,(short)rsa256KeyModulus.length);
		  	  	  rsaPrivateKey.setExponent(
		  	  	      rsa256KeyPrivateExponent,(short)0,(short)rsa256KeyPrivateExponent.length);
		          break;
		        default:
		    	  break;
		      }
		      break;
		    
		    // RSA CRT Private Keys
		    case KeyBuilder.TYPE_RSA_CRT_PRIVATE:
		      rsaPrivateCrtKey = (RSAPrivateCrtKey) key;
		      desKey = null; rsaPublicKey = null; rsaPrivateKey = null;
		      switch (key.getSize()) {
		        case KeyBuilder.LENGTH_RSA_512:
		          rsaPrivateCrtKey.setDP1(rsa64P1,(short)0,(short)rsa64P1.length);
		          rsaPrivateCrtKey.setDQ1(rsa64Q1,(short)0,(short)rsa64Q1.length);
		          rsaPrivateCrtKey.setP(rsa64P,(short)0,(short)rsa64P.length);
		          rsaPrivateCrtKey.setPQ(rsa64PQ,(short)0,(short)rsa64PQ.length);
		          rsaPrivateCrtKey.setQ(rsa64Q,(short)0,(short)rsa64Q.length);
		          break;
		        case KeyBuilder.LENGTH_RSA_768:
		    	  rsaPrivateCrtKey.setDP1(rsa96P1,(short)0,(short)rsa96P1.length);
			      rsaPrivateCrtKey.setDQ1(rsa96Q1,(short)0,(short)rsa96Q1.length);
			      rsaPrivateCrtKey.setP(rsa96P,(short)0,(short)rsa96P.length);
			      rsaPrivateCrtKey.setPQ(rsa96PQ,(short)0,(short)rsa96PQ.length);
			      rsaPrivateCrtKey.setQ(rsa96Q,(short)0,(short)rsa96Q.length);
		          break;
		        case KeyBuilder.LENGTH_RSA_1024:
		    	  rsaPrivateCrtKey.setDP1(rsa128P1,(short)0,(short)rsa128P1.length);
			      rsaPrivateCrtKey.setDQ1(rsa128Q1,(short)0,(short)rsa128Q1.length);
			      rsaPrivateCrtKey.setP(rsa128P,(short)0,(short)rsa128P.length);
			      rsaPrivateCrtKey.setPQ(rsa128PQ,(short)0,(short)rsa128PQ.length);
			      rsaPrivateCrtKey.setQ(rsa128Q,(short)0,(short)rsa128Q.length);
		          break;
		        case KeyBuilder.LENGTH_RSA_2048:
		    	  rsaPrivateCrtKey.setDP1(rsa256P1,(short)0,(short)rsa256P1.length);
			      rsaPrivateCrtKey.setDQ1(rsa256Q1,(short)0,(short)rsa256Q1.length);
			      rsaPrivateCrtKey.setP(rsa256P,(short)0,(short)rsa256P.length);
			      rsaPrivateCrtKey.setPQ(rsa256PQ,(short)0,(short)rsa256PQ.length);
			      rsaPrivateCrtKey.setQ(rsa256Q,(short)0,(short)rsa256Q.length);
		          break;
		        default:
		    	  break;
		      }
		      break;
		    
		    // RSA Public Keys
		    case KeyBuilder.TYPE_RSA_PUBLIC:
		    case KeyInfo.TYPE_RSA_CRT_PUBLIC:
		      rsaPublicKey = (RSAPublicKey) key;
			  desKey = null; rsaPrivateKey = null; rsaPrivateCrtKey = null;
			  switch (key.getSize()) {
			  case KeyBuilder.LENGTH_RSA_512:
			    rsaPublicKey.setModulus(
			        rsa64KeyModulus,(short)0,(short)rsa64KeyModulus.length);
			    rsaPublicKey.setExponent(
			    	rsaKeyPublicExponent,(short)0,(short)rsaKeyPublicExponent.length);
			    break;
			  case KeyBuilder.LENGTH_RSA_768:
			    rsaPublicKey.setModulus(
			        rsa96KeyModulus,(short)0,(short)rsa96KeyModulus.length);
			    rsaPublicKey.setExponent(
			    	rsaKeyPublicExponent,(short)0,(short)rsaKeyPublicExponent.length);
			    break;
			  case KeyBuilder.LENGTH_RSA_1024:
			    rsaPublicKey.setModulus(
			  	    rsa128KeyModulus,(short)0,(short)rsa128KeyModulus.length);
			  	rsaPublicKey.setExponent(
			  	    rsaKeyPublicExponent,(short)0,(short)rsaKeyPublicExponent.length);
			    break;
			  case KeyBuilder.LENGTH_RSA_2048:
			    rsaPublicKey.setModulus(
			  	    rsa256KeyModulus,(short)0,(short)rsa256KeyModulus.length);
			  	rsaPublicKey.setExponent(
			  		rsaKeyPublicExponent,(short)0,(short)rsaKeyPublicExponent.length);
			    break;
			  default:
				break;
		    }
		    break;
		    
		    // Default Case
		    default:
		      break;
		  }
          return;
		}catch(RuntimeException e){
		  keyInfo.setKeyType((byte)0);
		  keyInfo.setKeyLength((short)0);
		  keyInfo.setKeyEncryption(false);
		  throw e;
		}
	  }
	  else {
	    Key k = keys[s];
	    if ((k.getType() == keyInfo.getKeyType()) && 
	    	 (k.getSize() == keyInfo.getKeyLength()) &&
	    	 ((k instanceof KeyEncryption) == keyInfo.getKeyEncryption())) {
	      key = k;
	      return;
	    }
	  }
    }
  }
}